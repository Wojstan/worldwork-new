{
  "address": "0xCc19F29c5d603ccCd7111CD6E48b94F0E738b4aC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_appId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_actionId",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "employer",
          "type": "address"
        }
      ],
      "name": "EmployerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        }
      ],
      "name": "WorkerRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "acceptWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        }
      ],
      "name": "addDefaultJobOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "addDefaultJobOfferWithWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "addDefaultValuesEmployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "addDefaultValuesWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stablecoinSalary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenSalary",
          "type": "uint256"
        }
      ],
      "name": "addJobOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "applyForJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "deactivateJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "employers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getJobApplicants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        }
      ],
      "name": "getJobs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "employer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                }
              ],
              "internalType": "struct WorldWork.Salary",
              "name": "stablecoinSalary",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                }
              ],
              "internalType": "struct WorldWork.Salary",
              "name": "tokenSalary",
              "type": "tuple"
            },
            {
              "internalType": "enum WorldWork.Stage",
              "name": "stage",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "worker",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "applicants",
              "type": "address[]"
            }
          ],
          "internalType": "struct WorldWork.Job[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "jobs",
      "outputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct WorldWork.Salary",
          "name": "stablecoinSalary",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct WorldWork.Salary",
          "name": "tokenSalary",
          "type": "tuple"
        },
        {
          "internalType": "enum WorldWork.Stage",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "registerEmployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "registerWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "employer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "testAddress",
          "type": "address"
        }
      ],
      "name": "testApplyForJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95d2dde80687a6a2fe85d320ac26a867414ee93f2375690b6f8bca4c20c4d41f",
  "receipt": {
    "to": null,
    "from": "0x9F5eF94605496003D50E0c6d7641969feAc9dd41",
    "contractAddress": "0xCc19F29c5d603ccCd7111CD6E48b94F0E738b4aC",
    "transactionIndex": 2,
    "gasUsed": "1330466",
    "logsBloom": "0x
    "blockHash": "0x750b07646ceb9df8b1d8d89ddc39901cdaf6e53e080dfa2ef9b8c2869b333b0b",
    "transactionHash": "0x95d2dde80687a6a2fe85d320ac26a867414ee93f2375690b6f8bca4c20c4d41f",
    "logs": [],
    "blockNumber": 16982495,
    "cumulativeGasUsed": "1395341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11cA3127182f7583EfC416a8771BD4d11Fae4334",
    "app_staging_3aeacead9480597498aa72bc01889e92",
    "regiter-work-user"
  ],
  "numDeployments": 1,
  "solcInputHash": "147b2c37ce8efaa681c7d391930b88dc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_appId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_actionId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"}],\"name\":\"EmployerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"WorkerRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"acceptWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"}],\"name\":\"addDefaultJobOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"addDefaultJobOfferWithWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addDefaultValuesEmployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addDefaultValuesWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSalary\",\"type\":\"uint256\"}],\"name\":\"addJobOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"applyForJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deactivateJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"employers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getJobApplicants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"}],\"name\":\"getJobs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct WorldWork.Salary\",\"name\":\"stablecoinSalary\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct WorldWork.Salary\",\"name\":\"tokenSalary\",\"type\":\"tuple\"},{\"internalType\":\"enum WorldWork.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"applicants\",\"type\":\"address[]\"}],\"internalType\":\"struct WorldWork.Job[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct WorldWork.Salary\",\"name\":\"stablecoinSalary\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct WorldWork.Salary\",\"name\":\"tokenSalary\",\"type\":\"tuple\"},{\"internalType\":\"enum WorldWork.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"registerEmployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"registerWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"employer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"testAddress\",\"type\":\"address\"}],\"name\":\"testApplyForJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_actionId\":\"The World ID action ID\",\"_appId\":\"The World ID app ID\",\"_worldId\":\"The WorldID instance that will verify the proofs\"}},\"registerEmployer(address,uint256,uint256,uint256[8])\":{\"details\":\"Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\",\"params\":{\"nullifierHash\":\"The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\",\"proof\":\"The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\",\"root\":\"The root of the Merkle tree (returned by the JS widget).\",\"signal\":\"An arbitrary input from the user, usually the user's wallet address (check README for further details)\"}},\"registerWorker(address,uint256,uint256,uint256[8])\":{\"details\":\"Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\",\"params\":{\"nullifierHash\":\"The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\",\"proof\":\"The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\",\"root\":\"The root of the Merkle tree (returned by the JS widget).\",\"signal\":\"An arbitrary input from the user, usually the user's wallet address (check README for further details)\"}}},\"stateVariables\":{\"externalNullifier\":{\"details\":\"The contract's external nullifier hash\"},\"groupId\":{\"details\":\"The World ID group ID (always 1)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\"},\"worldId\":{\"details\":\"The World ID instance that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorldWork.sol\":\"WorldWork\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/WorldWork.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./interfaces/IWorldID.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract WorldWork {\\n\\tenum Stage {\\n\\t\\tLive,\\n\\t\\tCompleted\\n\\t}\\n\\n\\tstruct Job {\\n\\t\\taddress employer;\\n\\t\\tSalary stablecoinSalary;\\n\\t\\tSalary tokenSalary;\\n\\t\\tStage stage;\\n\\t\\taddress worker;\\n\\t\\taddress[] applicants;\\n\\t}\\n\\n\\tstruct Salary {\\n\\t\\tuint amount;\\n\\t\\tIERC20 token;\\n\\t}\\n\\n\\tmapping(address => bool) public workers;\\n\\tmapping(address => bool) public employers;\\n\\tmapping(address => Job[]) public jobs;\\n\\n\\t// mapping(string => VisitDetails) public visitdetails;\\n\\n\\t// mapping(address => mapping(address => bool)) public doctorsPermissions;\\n\\n\\tusing ByteHasher for bytes;\\n\\n\\t///////////////////////////////////////////////////////////////////////////////\\n\\t///                                  ERRORS                                ///\\n\\t//////////////////////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Thrown when attempting to reuse a nullifier\\n\\terror InvalidNullifier();\\n\\n\\t/// @dev The World ID instance that will be used for verifying proofs\\n\\tIWorldID internal immutable worldId;\\n\\n\\t/// @dev The contract's external nullifier hash\\n\\tuint256 internal immutable externalNullifier;\\n\\n\\t/// @dev The World ID group ID (always 1)\\n\\tuint256 internal immutable groupId = 1;\\n\\n\\taddress tokenDWL = 0x5c383F1AfdC3B39dD4367d16CB8Bb72605EB08A8;\\n\\n\\t/// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\\n\\tmapping(uint256 => bool) internal nullifierHashes;\\n\\n\\tevent EmployerRegistered(address indexed employer);\\n\\tevent WorkerRegistered(address indexed patient);\\n\\t// event VisitFinalized(\\n\\t// \\taddress indexed patient,\\n\\t// \\taddress indexed doctor,\\n\\t// \\tstring visitCid,\\n\\t// \\tuint price\\n\\t// );\\n\\t// event TransactionPaid(string visitCid);\\n\\n\\t/// @param _worldId The WorldID instance that will verify the proofs\\n\\t/// @param _appId The World ID app ID\\n\\t/// @param _actionId The World ID action ID\\n\\tconstructor(\\n\\t\\tIWorldID _worldId,\\n\\t\\tstring memory _appId,\\n\\t\\tstring memory _actionId\\n\\t) {\\n\\t\\tworldId = _worldId;\\n\\t\\texternalNullifier = abi\\n\\t\\t\\t.encodePacked(abi.encodePacked(_appId).hashToField(), _actionId)\\n\\t\\t\\t.hashToField();\\n\\t}\\n\\n\\t/// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\\n\\t/// @param root The root of the Merkle tree (returned by the JS widget).\\n\\t/// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\\n\\t/// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\\n\\t/// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\\n\\tfunction registerWorker(\\n\\t\\taddress signal,\\n\\t\\tuint256 root,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256[8] calldata proof\\n\\t) public {\\n\\t\\t// First, we make sure this person hasn't done this before\\n\\t\\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\t\\trequire(!workers[signal], \\\"Worker already registered\\\");\\n\\t\\trequire(!employers[signal], \\\"Employer already registered\\\");\\n\\n\\t\\t// We now verify the provided proof is valid and the user is verified by World ID\\n\\t\\tworldId.verifyProof(\\n\\t\\t\\troot,\\n\\t\\t\\tgroupId,\\n\\t\\t\\tabi.encodePacked(signal).hashToField(),\\n\\t\\t\\tnullifierHash,\\n\\t\\t\\texternalNullifier,\\n\\t\\t\\tproof\\n\\t\\t);\\n\\n\\t\\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\\n\\t\\tnullifierHashes[nullifierHash] = true;\\n\\n\\t\\tworkers[signal] = true;\\n\\n\\t\\temit WorkerRegistered(signal);\\n\\n\\t\\t// Finally, execute your logic here, for example issue a token, NFT, etc...\\n\\t\\t// Make sure to emit some kind of event afterwards!\\n\\t}\\n\\n\\t// function registerPatient() public {\\n\\t//     patients.push(msg.sender);\\n\\t// }\\n\\n\\t/// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\\n\\t/// @param root The root of the Merkle tree (returned by the JS widget).\\n\\t/// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\\n\\t/// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\\n\\t/// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\\n\\tfunction registerEmployer(\\n\\t\\taddress signal,\\n\\t\\tuint256 root,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256[8] calldata proof\\n\\t) public {\\n\\t\\t// First, we make sure this person hasn't done this before\\n\\t\\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\t\\trequire(!workers[signal], \\\"Worker already registered\\\");\\n\\t\\trequire(!employers[signal], \\\"Employer already registered\\\");\\n\\t\\t// We now verify the provided proof is valid and the user is verified by World ID\\n\\t\\tworldId.verifyProof(\\n\\t\\t\\troot,\\n\\t\\t\\tgroupId,\\n\\t\\t\\tabi.encodePacked(signal).hashToField(),\\n\\t\\t\\tnullifierHash,\\n\\t\\t\\texternalNullifier,\\n\\t\\t\\tproof\\n\\t\\t);\\n\\n\\t\\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\\n\\t\\tnullifierHashes[nullifierHash] = true;\\n\\n\\t\\temployers[signal] = true;\\n\\n\\t\\temit EmployerRegistered(signal);\\n\\t}\\n\\n\\tfunction addJobOffer(uint stablecoinSalary, uint tokenSalary) public {\\n\\t\\trequire(employers[msg.sender], \\\"Only employers can add job offers\\\");\\n\\t\\tjobs[msg.sender].push(\\n\\t\\t\\tJob(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tSalary(stablecoinSalary, IERC20(tokenDWL)),\\n\\t\\t\\t\\tSalary(tokenSalary, IERC20(tokenDWL)),\\n\\t\\t\\t\\tStage.Live,\\n\\t\\t\\t\\taddress(0),\\n\\t\\t\\t\\tnew address[](0)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction applyForJob(address employer, uint index) public {\\n\\t\\trequire(workers[msg.sender], \\\"Only workers can apply for jobs\\\");\\n\\t\\trequire(\\n\\t\\t\\temployers[employer],\\n\\t\\t\\t\\\"Only employers can have job applications\\\"\\n\\t\\t);\\n\\t\\tjobs[employer][index].applicants.push(msg.sender);\\n\\t}\\n\\n\\tfunction acceptWorker(address worker, uint index) public {\\n\\t\\trequire(employers[msg.sender], \\\"Only employers can accept workers\\\");\\n\\t\\trequire(workers[worker], \\\"Only workers can be accepted\\\");\\n\\t\\tjobs[msg.sender][index].worker = worker;\\n\\t}\\n\\n\\tfunction deactivateJob(uint index) public {\\n\\t\\trequire(employers[msg.sender], \\\"Only employers can complete jobs\\\");\\n\\t\\tjobs[msg.sender][index].stage = Stage.Completed;\\n\\t}\\n\\n\\tfunction addDefaultValuesEmployer(address adr) public {\\n\\t\\temployers[adr] = true;\\n\\t}\\n\\n\\tfunction addDefaultValuesWorker(address adr) public {\\n\\t\\tworkers[adr] = true;\\n\\t}\\n\\n\\tfunction addDefaultJobOffer(address employer) public {\\n\\t\\tjobs[employer].push(\\n\\t\\t\\tJob(\\n\\t\\t\\t\\temployer,\\n\\t\\t\\t\\tSalary(100, IERC20(address(0))),\\n\\t\\t\\t\\tSalary(100, IERC20(address(0))),\\n\\t\\t\\t\\tStage.Live,\\n\\t\\t\\t\\taddress(0),\\n\\t\\t\\t\\tnew address[](0)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t\\tfunction addDefaultJobOfferWithWorker(address employer, address worker) public {\\n\\t\\tjobs[employer].push(\\n\\t\\t\\tJob(\\n\\t\\t\\t\\temployer,\\n\\t\\t\\t\\tSalary(100, IERC20(address(0))),\\n\\t\\t\\t\\tSalary(100, IERC20(address(0))),\\n\\t\\t\\t\\tStage.Live,\\n\\t\\t\\t\\tworker,\\n\\t\\t\\t\\tnew address[](0)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction testApplyForJob(address employer, uint index, address testAddress) public {\\n\\t\\tjobs[employer][index].applicants.push(testAddress);\\n\\t}\\n\\n\\tfunction getJobs(address employer) public view returns (Job[] memory) {\\n\\t\\treturn jobs[employer];\\n\\t}\\n\\n\\tfunction getJobApplicants(address employer, uint index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (address[] memory)\\n\\t{\\n\\t\\treturn jobs[employer][index].applicants;\\n\\t}\\n\\n\\t// function finalizeVisit(\\n\\t// \\taddress patient,\\n\\t// \\taddress doctor,\\n\\t// \\tstring calldata visitCid,\\n\\t// \\tuint price\\n\\t// ) public {\\n\\t// \\trequire(doctors[doctor], \\\"Only doctors can add documents\\\");\\n\\t// \\trequire(patients[patient], \\\"Only patients can have documents\\\");\\n\\t//     require(doctorsPermissions[doctor][patient], \\\"Doctor does not have permission to access patient's profile\\\");\\n\\t// \\tvisitdetails[visitCid] = VisitDetails(price, false, doctor, patient);\\n\\t// \\temit VisitFinalized(patient, doctor, visitCid, price);\\n\\t// }\\n\\n\\t// function shareProfile(address doctor) public {\\n\\t// \\trequire(doctors[doctor], \\\"Only doctors can be shared with\\\");\\n\\t// \\trequire(patients[msg.sender], \\\"Only patients can share their profile\\\");\\n\\t// \\tdoctorsPermissions[doctor][msg.sender] = true;\\n\\t// }\\n\\n\\t// function revokeProfile(address doctor) public {\\n\\t// \\trequire(doctors[doctor], \\\"Only doctors can be shared with\\\");\\n\\t// \\trequire(patients[msg.sender], \\\"Only patients can share their profile\\\");\\n\\t// \\tdoctorsPermissions[doctor][msg.sender] = false;\\n\\t// }\\n\\n\\t// function payForVisit(string calldata visitCid) public payable {\\n\\t// \\trequire(patients[msg.sender], \\\"Only patients can pay for visits\\\");\\n\\t// \\trequire(\\n\\t// \\t\\tvisitdetails[visitCid].patient == msg.sender,\\n\\t// \\t\\t\\\"Only the patient can pay for the visit\\\"\\n\\t// \\t);\\n\\t// \\trequire(\\n\\t// \\t\\tvisitdetails[visitCid].paid == false,\\n\\t// \\t\\t\\\"The visit has already been paid for\\\"\\n\\t// \\t);\\n\\t// \\trequire(visitdetails[visitCid].price == msg.value, \\\"Bad value\\\");\\n\\t// \\t// Transfer the payment to the doctor\\n\\t// \\tpayable(visitdetails[visitCid].doctor).transfer(msg.value);\\n\\t// \\t// Mark the visit as paid\\n\\t// \\tvisitdetails[visitCid].paid = true;\\n\\t// \\trevokeProfile(visitdetails[visitCid].doctor);\\n\\t// \\temit TransactionPaid(visitCid);\\n\\t// }\\n}\\n\",\"keccak256\":\"0x77033dab5570f282507c085439d7a3482e1748c4adac7722c34201156b0b1129\",\"license\":\"MIT\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\\n\",\"keccak256\":\"0x225f0627ac21d07df35533f605936035d74aa0f05a632cb8d150d3af50408cd0\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x20fc12dea0b817fb8b7bc1a851082676ed2dcb844d3673d60aa5570da3e1b62e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600160c052600380546001600160a01b031916735c383f1afdc3b39dd4367d16cb8bb72605eb08a81790553480156200003c57600080fd5b5060405162001957380380620019578339810160408190526200005f91620001ce565b6001600160a01b038316608052604051620000bd90620000a9906200008990859060200162000258565b604051602081830303815290604052620000ca60201b620011a01760201c565b826040516020016200008992919062000276565b60a052506200029e915050565b6000600882604051602001620000e1919062000258565b60408051601f198184030181529190528051602090910120901c92915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001345781810151838201526020016200011a565b50506000910152565b600082601f8301126200014f57600080fd5b81516001600160401b03808211156200016c576200016c62000101565b604051601f8301601f19908116603f0116810190828211818310171562000197576200019762000101565b81604052838152866020858801011115620001b157600080fd5b620001c484602083016020890162000117565b9695505050505050565b600080600060608486031215620001e457600080fd5b83516001600160a01b0381168114620001fc57600080fd5b60208501519093506001600160401b03808211156200021a57600080fd5b62000228878388016200013d565b935060408601519150808211156200023f57600080fd5b506200024e868287016200013d565b9150509250925092565b600082516200026c81846020870162000117565b9190910192915050565b828152600082516200029081602085016020870162000117565b919091016020019392505050565b60805160a05160c051611674620002e3600039600081816107d20152610d0c0152600081816108340152610d5a0152600081816107a20152610cdc01526116746000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636f82f8fd1161009757806393c3841a1161006657806393c3841a1461026a578063b43c4b271461027d578063ceb35f0a14610290578063dbb52985146102c557600080fd5b80636f82f8fd14610200578063755d2118146102245780637e5864851461024457806392ebada01461025757600080fd5b8063366d2a4b116100d3578063366d2a4b146101a45780634048a257146101b757806349ec8246146101da578063585f6b33146101ed57600080fd5b80630be435bd146101055780630cd07e1c1461013d5780631a3cbef4146101715780632d12169314610191575b600080fd5b61012861011336600461126b565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61016f61014b36600461126b565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b005b61018461017f36600461126b565b6102d8565b60405161013491906112c5565b61016f61019f3660046113e6565b610450565b61016f6101b2366004611419565b6105e5565b6101286101c536600461126b565b60006020819052908152604090205460ff1681565b61016f6101e8366004611432565b6106a2565b61016f6101fb366004611480565b610910565b61021361020e366004611480565b610a3e565b6040516101349594939291906114aa565b610237610232366004611480565b610acc565b6040516101349190611516565b61016f610252366004611563565b610b6c565b61016f610265366004611432565b610bdc565b61016f610278366004611480565b610e36565b61016f61028b36600461159f565b610f70565b61016f61029e36600461126b565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b61016f6102d336600461126b565b611048565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156104455760008481526020908190206040805160c0810182526007860290920180546001600160a01b039081168452825180840184526001808401548252600284015483168288015285870191909152835180850185526003840154815260048401549092169582019590955291830191909152600581015491929091606084019160ff909116908111156103ab576103ab61128d565b60018111156103bc576103bc61128d565b8152600582015461010090046001600160a01b0316602080830191909152600683018054604080518285028101850182528281529401939283018282801561042d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161040f575b50505050508152505081526020019060010190610310565b505050509050919050565b6001600160a01b0382166000818152600260209081526040808320815160c0810183529485528151808301835260648082528185018690528685019190915282518084018452908152928301849052908401919091529190606082019081526001600160a01b038416602082015260400160005b6040519080825280602002602001820160405280156104ed578160200160208202803683370190505b5090528154600180820184556000938452602093849020835160079093020180546001600160a01b03199081166001600160a01b03948516178255848601518051838501558601516002830180548316918616919091179055604085015180516003840155909501516004820180549096169316929092179093556060820151600582018054939492939192909160ff19169083818111156105915761059161128d565b021790555060808201516005820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560a082015180516105de9160068401916020909101906111d5565b5050505050565b3360009081526001602052604090205460ff166106495760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920656d706c6f796572732063616e20636f6d706c657465206a6f627360448201526064015b60405180910390fd5b3360009081526002602052604090208054600191908390811061066e5761066e6115c1565b60009182526020909120600560079092020101805460ff19166001838181111561069a5761069a61128d565b021790555050565b60008281526004602052604090205460ff16156106d257604051632ec8265960e11b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090205460ff16156107375760405162461bcd60e51b815260206004820152601960248201527815dbdc9ad95c88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610640565b6001600160a01b03841660009081526001602052604090205460ff16156107a05760405162461bcd60e51b815260206004820152601b60248201527f456d706c6f79657220616c7265616479207265676973746572656400000000006044820152606401610640565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006108318860405160200161081d919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040526111a0565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b8152600401610875969594939291906115d7565b60006040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b50505060008381526004602090815260408083208054600160ff1991821681179092556001600160a01b038a168086529385905282852080549091169091179055519092507f39e7e6ae07d889bdbff877aba3aa77fb0f33f79807df2c91a0ac6059849e3e0e9190a250505050565b3360009081526001602052604090205460ff166109795760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920656d706c6f796572732063616e2061636365707420776f726b65726044820152607360f81b6064820152608401610640565b6001600160a01b03821660009081526020819052604090205460ff166109e15760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920776f726b6572732063616e206265206163636570746564000000006044820152606401610640565b336000908152600260205260409020805483919083908110610a0557610a056115c1565b906000526020600020906007020160050160016101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b60026020528160005260406000208181548110610a5a57600080fd5b600091825260209182902060079091020180546040805180820182526001840154815260028401546001600160a01b039081168287015282518084019093526003850154835260048501548116958301959095526005909301549184169550919350909160ff82169161010090041685565b6001600160a01b038216600090815260026020526040902080546060919083908110610afa57610afa6115c1565b9060005260206000209060070201600601805480602002602001604051908101604052809291908181526020018280548015610b5f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b41575b5050505050905092915050565b6001600160a01b0383166000908152600260205260409020805483908110610b9657610b966115c1565b60009182526020808320600792909202909101600601805460018101825590835291200180546001600160a01b0319166001600160a01b03929092169190911790555050565b60008281526004602052604090205460ff1615610c0c57604051632ec8265960e11b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090205460ff1615610c715760405162461bcd60e51b815260206004820152601960248201527815dbdc9ad95c88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610640565b6001600160a01b03841660009081526001602052604090205460ff1615610cda5760405162461bcd60e51b815260206004820152601b60248201527f456d706c6f79657220616c7265616479207265676973746572656400000000006044820152606401610640565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f0000000000000000000000000000000000000000000000000000000000000000610d578860405160200161081d919060609190911b6bffffffffffffffffffffffff1916815260140190565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b8152600401610d9b969594939291906115d7565b60006040518083038186803b158015610db357600080fd5b505afa158015610dc7573d6000803e3d6000fd5b50505060008381526004602090815260408083208054600160ff1991821681179092556001600160a01b038a168086529382905282852080549091169091179055519092507f320f0bf1a83ce6d92e80948ac3800b41c7ca41667fc5e5ce639b73129dff3bdb9190a250505050565b3360009081526020819052604090205460ff16610e955760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920776f726b6572732063616e206170706c7920666f72206a6f6273006044820152606401610640565b6001600160a01b03821660009081526001602052604090205460ff16610f0e5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c7920656d706c6f796572732063616e2068617665206a6f62206170706c60448201526769636174696f6e7360c01b6064820152608401610640565b6001600160a01b0382166000908152600260205260409020805482908110610f3857610f386115c1565b60009182526020808320600660079093020191909101805460018101825590835291200180546001600160a01b031916331790555050565b3360009081526001602052604090205460ff16610fd95760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920656d706c6f796572732063616e20616464206a6f62206f666665726044820152607360f81b6064820152608401610640565b336000818152600260209081526040808320815160c081018352948552815180830183528781526003546001600160a01b0316818501819052868501919091528251808401845287815293840152908401919091526060830182905260808301829052919060a08201906104c4565b6001600160a01b038181166000818152600260208181526040808420815160c081018352958652815180830183526064808252818501879052878501918252835180850185529081528085018790528784019081526060880187815260808901889052845188815280870190955260a08901949094528254600180820185559388529685902088516007909802018054978a166001600160a01b031998891617815591518051838501558501519582018054968a169688169690961790955593518051600386015590920151600484018054919097169416939093179094559051600582018054939492939192909160ff191690838181111561114d5761114d61128d565b021790555060808201516005820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560a0820151805161119a9160068401916020909101906111d5565b50505050565b60006008826040516020016111b5919061160f565b60408051601f198184030181529190528051602090910120901c92915050565b82805482825590600052602060002090810192821561122a579160200282015b8281111561122a57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906111f5565b5061123692915061123a565b5090565b5b80821115611236576000815560010161123b565b80356001600160a01b038116811461126657600080fd5b919050565b60006020828403121561127d57600080fd5b6112868261124f565b9392505050565b634e487b7160e01b600052602160045260246000fd5b600281106112c157634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156113d757898403603f19018652825180516001600160a01b03908116865289820151610100918288019161133a8d8a0182805182526020908101516001600160a01b0316910152565b508a8401516060611360818b0183805182526020908101516001600160a01b0316910152565b850151905060a06113738a8201836112a3565b6080860151831660c08b01529094015160e0890193909352825191829052918b01925061012087019185915b808310156113c157845182168452938c0193928c01926001929092019161139f565b50505096890196945050918701916001016112ed565b50919998505050505050505050565b600080604083850312156113f957600080fd5b6114028361124f565b91506114106020840161124f565b90509250929050565b60006020828403121561142b57600080fd5b5035919050565b60008060008061016080868803121561144a57600080fd5b6114538661124f565b9450602086013593506040860135925086818701111561147257600080fd5b509295919450926060019150565b6000806040838503121561149357600080fd5b61149c8361124f565b946020939093013593505050565b6001600160a01b03868116825260e08201906114dc6020840188805182526020908101516001600160a01b0316910152565b8551606084015260208601516001600160a01b0316608084015261150360a08401866112a3565b80841660c0840152509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156115575783516001600160a01b031683529284019291840191600101611532565b50909695505050505050565b60008060006060848603121561157857600080fd5b6115818461124f565b9250602084013591506115966040850161124f565b90509250925092565b600080604083850312156115b257600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b6000825160005b818110156116305760208186018101518583015201611616565b50600092019182525091905056fea26469706673582212201bdcebd9e6c89d45578d090182b977a841608309eff93a46e802e5bbb83e48b664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80636f82f8fd1161009757806393c3841a1161006657806393c3841a1461026a578063b43c4b271461027d578063ceb35f0a14610290578063dbb52985146102c557600080fd5b80636f82f8fd14610200578063755d2118146102245780637e5864851461024457806392ebada01461025757600080fd5b8063366d2a4b116100d3578063366d2a4b146101a45780634048a257146101b757806349ec8246146101da578063585f6b33146101ed57600080fd5b80630be435bd146101055780630cd07e1c1461013d5780631a3cbef4146101715780632d12169314610191575b600080fd5b61012861011336600461126b565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61016f61014b36600461126b565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b005b61018461017f36600461126b565b6102d8565b60405161013491906112c5565b61016f61019f3660046113e6565b610450565b61016f6101b2366004611419565b6105e5565b6101286101c536600461126b565b60006020819052908152604090205460ff1681565b61016f6101e8366004611432565b6106a2565b61016f6101fb366004611480565b610910565b61021361020e366004611480565b610a3e565b6040516101349594939291906114aa565b610237610232366004611480565b610acc565b6040516101349190611516565b61016f610252366004611563565b610b6c565b61016f610265366004611432565b610bdc565b61016f610278366004611480565b610e36565b61016f61028b36600461159f565b610f70565b61016f61029e36600461126b565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b61016f6102d336600461126b565b611048565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b828210156104455760008481526020908190206040805160c0810182526007860290920180546001600160a01b039081168452825180840184526001808401548252600284015483168288015285870191909152835180850185526003840154815260048401549092169582019590955291830191909152600581015491929091606084019160ff909116908111156103ab576103ab61128d565b60018111156103bc576103bc61128d565b8152600582015461010090046001600160a01b0316602080830191909152600683018054604080518285028101850182528281529401939283018282801561042d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161040f575b50505050508152505081526020019060010190610310565b505050509050919050565b6001600160a01b0382166000818152600260209081526040808320815160c0810183529485528151808301835260648082528185018690528685019190915282518084018452908152928301849052908401919091529190606082019081526001600160a01b038416602082015260400160005b6040519080825280602002602001820160405280156104ed578160200160208202803683370190505b5090528154600180820184556000938452602093849020835160079093020180546001600160a01b03199081166001600160a01b03948516178255848601518051838501558601516002830180548316918616919091179055604085015180516003840155909501516004820180549096169316929092179093556060820151600582018054939492939192909160ff19169083818111156105915761059161128d565b021790555060808201516005820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560a082015180516105de9160068401916020909101906111d5565b5050505050565b3360009081526001602052604090205460ff166106495760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920656d706c6f796572732063616e20636f6d706c657465206a6f627360448201526064015b60405180910390fd5b3360009081526002602052604090208054600191908390811061066e5761066e6115c1565b60009182526020909120600560079092020101805460ff19166001838181111561069a5761069a61128d565b021790555050565b60008281526004602052604090205460ff16156106d257604051632ec8265960e11b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090205460ff16156107375760405162461bcd60e51b815260206004820152601960248201527815dbdc9ad95c88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610640565b6001600160a01b03841660009081526001602052604090205460ff16156107a05760405162461bcd60e51b815260206004820152601b60248201527f456d706c6f79657220616c7265616479207265676973746572656400000000006044820152606401610640565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006108318860405160200161081d919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040526111a0565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b8152600401610875969594939291906115d7565b60006040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b50505060008381526004602090815260408083208054600160ff1991821681179092556001600160a01b038a168086529385905282852080549091169091179055519092507f39e7e6ae07d889bdbff877aba3aa77fb0f33f79807df2c91a0ac6059849e3e0e9190a250505050565b3360009081526001602052604090205460ff166109795760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920656d706c6f796572732063616e2061636365707420776f726b65726044820152607360f81b6064820152608401610640565b6001600160a01b03821660009081526020819052604090205460ff166109e15760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920776f726b6572732063616e206265206163636570746564000000006044820152606401610640565b336000908152600260205260409020805483919083908110610a0557610a056115c1565b906000526020600020906007020160050160016101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b60026020528160005260406000208181548110610a5a57600080fd5b600091825260209182902060079091020180546040805180820182526001840154815260028401546001600160a01b039081168287015282518084019093526003850154835260048501548116958301959095526005909301549184169550919350909160ff82169161010090041685565b6001600160a01b038216600090815260026020526040902080546060919083908110610afa57610afa6115c1565b9060005260206000209060070201600601805480602002602001604051908101604052809291908181526020018280548015610b5f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b41575b5050505050905092915050565b6001600160a01b0383166000908152600260205260409020805483908110610b9657610b966115c1565b60009182526020808320600792909202909101600601805460018101825590835291200180546001600160a01b0319166001600160a01b03929092169190911790555050565b60008281526004602052604090205460ff1615610c0c57604051632ec8265960e11b815260040160405180910390fd5b6001600160a01b03841660009081526020819052604090205460ff1615610c715760405162461bcd60e51b815260206004820152601960248201527815dbdc9ad95c88185b1c9958591e481c9959da5cdd195c9959603a1b6044820152606401610640565b6001600160a01b03841660009081526001602052604090205460ff1615610cda5760405162461bcd60e51b815260206004820152601b60248201527f456d706c6f79657220616c7265616479207265676973746572656400000000006044820152606401610640565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f0000000000000000000000000000000000000000000000000000000000000000610d578860405160200161081d919060609190911b6bffffffffffffffffffffffff1916815260140190565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b8152600401610d9b969594939291906115d7565b60006040518083038186803b158015610db357600080fd5b505afa158015610dc7573d6000803e3d6000fd5b50505060008381526004602090815260408083208054600160ff1991821681179092556001600160a01b038a168086529382905282852080549091169091179055519092507f320f0bf1a83ce6d92e80948ac3800b41c7ca41667fc5e5ce639b73129dff3bdb9190a250505050565b3360009081526020819052604090205460ff16610e955760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920776f726b6572732063616e206170706c7920666f72206a6f6273006044820152606401610640565b6001600160a01b03821660009081526001602052604090205460ff16610f0e5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c7920656d706c6f796572732063616e2068617665206a6f62206170706c60448201526769636174696f6e7360c01b6064820152608401610640565b6001600160a01b0382166000908152600260205260409020805482908110610f3857610f386115c1565b60009182526020808320600660079093020191909101805460018101825590835291200180546001600160a01b031916331790555050565b3360009081526001602052604090205460ff16610fd95760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920656d706c6f796572732063616e20616464206a6f62206f666665726044820152607360f81b6064820152608401610640565b336000818152600260209081526040808320815160c081018352948552815180830183528781526003546001600160a01b0316818501819052868501919091528251808401845287815293840152908401919091526060830182905260808301829052919060a08201906104c4565b6001600160a01b038181166000818152600260208181526040808420815160c081018352958652815180830183526064808252818501879052878501918252835180850185529081528085018790528784019081526060880187815260808901889052845188815280870190955260a08901949094528254600180820185559388529685902088516007909802018054978a166001600160a01b031998891617815591518051838501558501519582018054968a169688169690961790955593518051600386015590920151600484018054919097169416939093179094559051600582018054939492939192909160ff191690838181111561114d5761114d61128d565b021790555060808201516005820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560a0820151805161119a9160068401916020909101906111d5565b50505050565b60006008826040516020016111b5919061160f565b60408051601f198184030181529190528051602090910120901c92915050565b82805482825590600052602060002090810192821561122a579160200282015b8281111561122a57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906111f5565b5061123692915061123a565b5090565b5b80821115611236576000815560010161123b565b80356001600160a01b038116811461126657600080fd5b919050565b60006020828403121561127d57600080fd5b6112868261124f565b9392505050565b634e487b7160e01b600052602160045260246000fd5b600281106112c157634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156113d757898403603f19018652825180516001600160a01b03908116865289820151610100918288019161133a8d8a0182805182526020908101516001600160a01b0316910152565b508a8401516060611360818b0183805182526020908101516001600160a01b0316910152565b850151905060a06113738a8201836112a3565b6080860151831660c08b01529094015160e0890193909352825191829052918b01925061012087019185915b808310156113c157845182168452938c0193928c01926001929092019161139f565b50505096890196945050918701916001016112ed565b50919998505050505050505050565b600080604083850312156113f957600080fd5b6114028361124f565b91506114106020840161124f565b90509250929050565b60006020828403121561142b57600080fd5b5035919050565b60008060008061016080868803121561144a57600080fd5b6114538661124f565b9450602086013593506040860135925086818701111561147257600080fd5b509295919450926060019150565b6000806040838503121561149357600080fd5b61149c8361124f565b946020939093013593505050565b6001600160a01b03868116825260e08201906114dc6020840188805182526020908101516001600160a01b0316910152565b8551606084015260208601516001600160a01b0316608084015261150360a08401866112a3565b80841660c0840152509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156115575783516001600160a01b031683529284019291840191600101611532565b50909695505050505050565b60008060006060848603121561157857600080fd5b6115818461124f565b9250602084013591506115966040850161124f565b90509250925092565b600080604083850312156115b257600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b6000825160005b818110156116305760208186018101518583015201611616565b50600092019182525091905056fea26469706673582212201bdcebd9e6c89d45578d090182b977a841608309eff93a46e802e5bbb83e48b664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_actionId": "The World ID action ID",
          "_appId": "The World ID app ID",
          "_worldId": "The WorldID instance that will verify the proofs"
        }
      },
      "registerEmployer(address,uint256,uint256,uint256[8])": {
        "details": "Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.",
        "params": {
          "nullifierHash": "The nullifier hash for this proof, preventing double signaling (returned by the JS widget).",
          "proof": "The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).",
          "root": "The root of the Merkle tree (returned by the JS widget).",
          "signal": "An arbitrary input from the user, usually the user's wallet address (check README for further details)"
        }
      },
      "registerWorker(address,uint256,uint256,uint256[8])": {
        "details": "Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.",
        "params": {
          "nullifierHash": "The nullifier hash for this proof, preventing double signaling (returned by the JS widget).",
          "proof": "The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).",
          "root": "The root of the Merkle tree (returned by the JS widget).",
          "signal": "An arbitrary input from the user, usually the user's wallet address (check README for further details)"
        }
      }
    },
    "stateVariables": {
      "externalNullifier": {
        "details": "The contract's external nullifier hash"
      },
      "groupId": {
        "details": "The World ID group ID (always 1)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person"
      },
      "worldId": {
        "details": "The World ID instance that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/WorldWork.sol:WorldWork",
        "label": "workers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 119,
        "contract": "contracts/WorldWork.sol:WorldWork",
        "label": "employers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 125,
        "contract": "contracts/WorldWork.sol:WorldWork",
        "label": "jobs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(Job)105_storage)dyn_storage)"
      },
      {
        "astId": 145,
        "contract": "contracts/WorldWork.sol:WorldWork",
        "label": "tokenDWL",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 150,
        "contract": "contracts/WorldWork.sol:WorldWork",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Job)105_storage)dyn_storage": {
        "base": "t_struct(Job)105_storage",
        "encoding": "dynamic_array",
        "label": "struct WorldWork.Job[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Stage)88": {
        "encoding": "inplace",
        "label": "enum WorldWork.Stage",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Job)105_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorldWork.Job[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Job)105_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Job)105_storage": {
        "encoding": "inplace",
        "label": "struct WorldWork.Job",
        "members": [
          {
            "astId": 90,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "employer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 93,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "stablecoinSalary",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Salary)111_storage"
          },
          {
            "astId": 96,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "tokenSalary",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Salary)111_storage"
          },
          {
            "astId": 99,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "stage",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Stage)88"
          },
          {
            "astId": 101,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "worker",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 104,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "applicants",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Salary)111_storage": {
        "encoding": "inplace",
        "label": "struct WorldWork.Salary",
        "members": [
          {
            "astId": 107,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 110,
            "contract": "contracts/WorldWork.sol:WorldWork",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)77"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}